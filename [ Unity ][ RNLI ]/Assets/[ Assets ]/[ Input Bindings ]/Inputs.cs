//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/[ Assets ]/[ Input Bindings ]/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Default Mapping"",
            ""id"": ""7b95cf57-a93f-4969-9e2b-4c648a4cd372"",
            ""actions"": [
                {
                    ""name"": ""Researcher Conformation"",
                    ""type"": ""Button"",
                    ""id"": ""cefa061b-fa94-472a-81a8-6213d6a83208"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Participant Conformation"",
                    ""type"": ""Button"",
                    ""id"": ""6c561d62-8ca1-4724-983d-e3c55daf69a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AV Scale Value"",
                    ""type"": ""Value"",
                    ""id"": ""71ab269a-c4d9-4a45-aa08-ea2d3dd2bede"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Editor Skip"",
                    ""type"": ""Button"",
                    ""id"": ""aab31980-669d-4036-88f9-b25e65537e6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""63f9c41b-0541-444d-ab0e-005e5b103f28"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Researcher Conformation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7d59caee-f2a7-4f9d-a009-862b729fc1e5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AV Scale Value"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""de6577bd-5c0e-41dc-9db1-0f86d5416ade"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AV Scale Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0e293664-8d8e-4b7b-8a8c-1211b7c5f8c2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AV Scale Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""57fe9122-6367-4ec4-9cc7-a46470b563c6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AV Scale Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""62817169-eaa6-48d5-b61c-27a708ed06cf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AV Scale Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""86332bcb-b852-4cc9-a6d3-0b2b7634837a"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AV Scale Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82a17058-f8af-47f4-8fd7-f52b76f2f052"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AV Scale Value"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91e91b34-5485-4a7f-86cd-c14db8602629"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Participant Conformation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c7841b69-b057-4ce2-9aeb-2a0c94850f98"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Participant Conformation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b42330c-ea39-4a57-892d-2a1eade3ea51"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Participant Conformation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a57dfeda-76a8-4c35-b99f-b7709a23703c"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Editor Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Default Mapping
        m_DefaultMapping = asset.FindActionMap("Default Mapping", throwIfNotFound: true);
        m_DefaultMapping_ResearcherConformation = m_DefaultMapping.FindAction("Researcher Conformation", throwIfNotFound: true);
        m_DefaultMapping_ParticipantConformation = m_DefaultMapping.FindAction("Participant Conformation", throwIfNotFound: true);
        m_DefaultMapping_AVScaleValue = m_DefaultMapping.FindAction("AV Scale Value", throwIfNotFound: true);
        m_DefaultMapping_EditorSkip = m_DefaultMapping.FindAction("Editor Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default Mapping
    private readonly InputActionMap m_DefaultMapping;
    private List<IDefaultMappingActions> m_DefaultMappingActionsCallbackInterfaces = new List<IDefaultMappingActions>();
    private readonly InputAction m_DefaultMapping_ResearcherConformation;
    private readonly InputAction m_DefaultMapping_ParticipantConformation;
    private readonly InputAction m_DefaultMapping_AVScaleValue;
    private readonly InputAction m_DefaultMapping_EditorSkip;
    public struct DefaultMappingActions
    {
        private @Inputs m_Wrapper;
        public DefaultMappingActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ResearcherConformation => m_Wrapper.m_DefaultMapping_ResearcherConformation;
        public InputAction @ParticipantConformation => m_Wrapper.m_DefaultMapping_ParticipantConformation;
        public InputAction @AVScaleValue => m_Wrapper.m_DefaultMapping_AVScaleValue;
        public InputAction @EditorSkip => m_Wrapper.m_DefaultMapping_EditorSkip;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMapping; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultMappingActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultMappingActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultMappingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultMappingActionsCallbackInterfaces.Add(instance);
            @ResearcherConformation.started += instance.OnResearcherConformation;
            @ResearcherConformation.performed += instance.OnResearcherConformation;
            @ResearcherConformation.canceled += instance.OnResearcherConformation;
            @ParticipantConformation.started += instance.OnParticipantConformation;
            @ParticipantConformation.performed += instance.OnParticipantConformation;
            @ParticipantConformation.canceled += instance.OnParticipantConformation;
            @AVScaleValue.started += instance.OnAVScaleValue;
            @AVScaleValue.performed += instance.OnAVScaleValue;
            @AVScaleValue.canceled += instance.OnAVScaleValue;
            @EditorSkip.started += instance.OnEditorSkip;
            @EditorSkip.performed += instance.OnEditorSkip;
            @EditorSkip.canceled += instance.OnEditorSkip;
        }

        private void UnregisterCallbacks(IDefaultMappingActions instance)
        {
            @ResearcherConformation.started -= instance.OnResearcherConformation;
            @ResearcherConformation.performed -= instance.OnResearcherConformation;
            @ResearcherConformation.canceled -= instance.OnResearcherConformation;
            @ParticipantConformation.started -= instance.OnParticipantConformation;
            @ParticipantConformation.performed -= instance.OnParticipantConformation;
            @ParticipantConformation.canceled -= instance.OnParticipantConformation;
            @AVScaleValue.started -= instance.OnAVScaleValue;
            @AVScaleValue.performed -= instance.OnAVScaleValue;
            @AVScaleValue.canceled -= instance.OnAVScaleValue;
            @EditorSkip.started -= instance.OnEditorSkip;
            @EditorSkip.performed -= instance.OnEditorSkip;
            @EditorSkip.canceled -= instance.OnEditorSkip;
        }

        public void RemoveCallbacks(IDefaultMappingActions instance)
        {
            if (m_Wrapper.m_DefaultMappingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultMappingActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultMappingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultMappingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultMappingActions @DefaultMapping => new DefaultMappingActions(this);
    public interface IDefaultMappingActions
    {
        void OnResearcherConformation(InputAction.CallbackContext context);
        void OnParticipantConformation(InputAction.CallbackContext context);
        void OnAVScaleValue(InputAction.CallbackContext context);
        void OnEditorSkip(InputAction.CallbackContext context);
    }
}
